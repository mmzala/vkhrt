#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#include "bindless.glsl"
#include "ray.glsl"
#include "primitives.glsl"

layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Curves { Curve curves[]; };

float Prhi(Ray ray, Curve curve)
{
    float result = 0.0;
    const float curveRadius = 0.02; // TODO: Get from cpu

    // Early out using cylinder check that encloses the curve
    float rmax = CurveDistanceToCylinder(curve, SampleCurvePoint(curve, 0.5));
    rmax += curveRadius;

    Cylinder cylinder;
    cylinder.p0 = curve.start;
    cylinder.p1 = curve.end;
    cylinder.radius = rmax;

    if (!RayCylinderIntersect(ray, cylinder))
    {
        return result;
    }

    // Start converging from either side

    // Convert curve to ray-centric coords
    mat4 rccTransform = CreateRCCMatrix(ray);
    Curve rccCurve = TransformCurve(curve, rccTransform);

    // Choose end point to start
    const vec3 rayDirection = vec3(0.0, 0.0, 1.0);
    vec3 curveDirection = normalize(rccCurve.end - rccCurve.start);
    float tStart = dot(curveDirection, rayDirection) > 0.0 ? 0.0 : 1.0;

    for (uint side = 0; side < 2; ++side)
    {
        const uint maxIterations = 5;
        float t = tStart;

        RayConeIntersection rci;
        float told = 0.0;
        float dt1 = 0.0;
        float dt2 = 0.0;

        for (uint i = 0; i < maxIterations; ++i)
        {
            Cone cone;
            cone.center = SampleCurvePoint(rccCurve, t);
            cone.radius = curveRadius;
            cone.axis = SampleCurveAxis(rccCurve, t);
            cone.slant = 0.0; // Cyllinder

            rci = RayConeIntersectRCC(cone);

            // Paper stops iterations on each instance of "abs(rci.dt) < 5e-5"
            if (rci.isIntersection && abs(rci.dt) < 5e-5)
            {
                // TODO: Add hit info
                result = 1.0;
                break;
            }

            rci.dt = min(rci.dt, 0.5);
            rci.dt = max(rci.dt, -0.5);

            dt1 = dt2;
            dt2 = rci.dt;

            // Regula falsi
            if (dt1 * dt2 < 0.0)
            {
                float tnext = 0.0;

                // Switching to the bisection every 4th iteration
                if ((i & 3) == 0)
                {
                    tnext = 0.5 * (told + t);
                }
                else
                {
                    tnext = (dt2 * told - dt1 * t) / (dt2 - dt1);
                }

                told = t;
                t = tnext;
            }
            else
            {
                told = t;
                t += rci.dt;
            }

            // Outside of curve, so we stop
            if (t < 0.0 || t > 1.0)
            {
                break;
            }
        }

        // Try convernging from other side if we don't get a hit from the closest directional side
        if (result != 1.0)
        {
            tStart = 1.0 - tStart;
        }
        else
        {
            break;
        }
    }

    return result;
}

void main()
{
    BLASInstance blasInstance = blasInstances[gl_InstanceCustomIndexEXT];
    GeometryNode geometryNode = geometryNodes[blasInstance.firstGeometryIndex + gl_GeometryIndexEXT];

    Curves curves = Curves(geometryNode.primitiveBufferDeviceAddress);
    Curve curve = curves.curves[gl_PrimitiveID];

    Ray ray;
    ray.origin = gl_WorldRayOriginEXT;
    ray.direction = gl_WorldRayDirectionEXT;

    float tHit = Prhi(ray, curve);

    if (tHit > 0.0)
    {
        reportIntersectionEXT(tHit, 0);
    }
}
