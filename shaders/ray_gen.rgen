#version 460
#extension GL_EXT_ray_tracing : enable

#include "ray.glsl"

layout(set = 1, binding = 0, rgba8) uniform image2D image;
layout(set = 1, binding = 1) uniform accelerationStructureEXT topLevelAS;
layout(set = 2, binding = 0) uniform CameraProperties
{
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT HitPayload payload;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    payload.hitValue = vec3(0);
    payload.ray.origin = origin.xyz;
    payload.ray.direction = direction.xyz;

    traceRayEXT(topLevelAS,             // acceleration structure
                rayFlags,               // rayFlags
                0xFF,                   // cullMask
                0,                      // sbtRecordOffset
                0,                      // sbtRecordStride
                0,                      // missIndex
                payload.ray.origin,     // ray origin
                tMin,                   // ray min range
                payload.ray.direction,  // ray direction
                tMax,                   // ray max range
                0                       // payload (location = 0)
    );

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hitValue, 1.0));
}
